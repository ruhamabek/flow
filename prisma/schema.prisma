// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  workflow      Workflow[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}


model Workflow {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name        String
  description String
  definition  String
  status      String

  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  executions WorkflowExecution[]

  @@unique([name, userId])
  @@map("workflow")
}

model WorkflowExecution {
  id            String @id @default(cuid())
  workflowId    String
  userId        String
  trigger       String
  status        String
  createdAt     DateTime @default(now())
  startedAt     DateTime?
  completedAt   DateTime?
  definition    String   @default("{}")

  creditsConsumed  Int@default(0)

  phases        ExecutionPhase[]
  workflow      Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

}

model ExecutionPhase{
  id            String @id @default(cuid())
  userId        String
  status        String
  number        Int
  node          String
  name          String
  startedAt     DateTime?
  completedAt   DateTime?
  inputs        String?
  outputs       String?

  creditsCost         Int?
  workflowExecutionId String
  logs                ExecutionLog[]
  execution           WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
} 

model ExecutionLog{
  id            String @id @default(cuid())
  logLevel      String
  message       String
  timestamp     DateTime @default(now())

  executionPhaseId    String
  executionPhase      ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}